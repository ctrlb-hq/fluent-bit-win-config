# Utilities and Monitoring Functions for FluentBit Deployment

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

# Function to write colored output
function Write-Status {
    param(
        [string]$Message,
        [string]$Type = "Info"
    )
    
    switch ($Type) {
        "Success" { Write-Host "✓ $Message" -ForegroundColor Green }
        "Warning" { Write-Host "⚠ $Message" -ForegroundColor Yellow }
        "Error" { Write-Host "✗ $Message" -ForegroundColor Red }
        "Info" { Write-Host "ℹ $Message" -ForegroundColor Cyan }
        "Step" { Write-Host "➤ $Message" -ForegroundColor Magenta }
    }
}

# Function to test if running as administrator
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Function to ensure directory exists
function Ensure-Directory {
    param([string]$Path)
    
    if (-not (Test-Path -Path $Path)) {
        try {
            New-Item -ItemType Directory -Path $Path -Force | Out-Null
            Write-Status "Created directory: $Path" "Success"
        }
        catch {
            Write-Status "Failed to create directory: $Path - $($_.Exception.Message)" "Error"
            return $false
        }
    }
    return $true
}

# ============================================================================
# MONITORING FUNCTIONS
# ============================================================================

# Function to create helpful monitoring tools
function Create-MonitoringTools {
    Write-Status "Creating FluentBit monitoring tools..." "Step"
    
    $logDir = Split-Path $FluentBitLogPath -Parent
    
    # Create log tail script for easy monitoring
    $tailScript = @"
# FluentBit Log Tail Script
# Auto-generated by Deploy-FluentBit.ps1

Write-Host "Monitoring FluentBit logs: $FluentBitLogPath" -ForegroundColor Green
Write-Host "Press Ctrl+C to stop monitoring" -ForegroundColor Yellow
Write-Host "=" * 60

if (Test-Path "$FluentBitLogPath") {
    Get-Content "$FluentBitLogPath" -Tail 20 -Wait
} else {
    Write-Host "FluentBit log file not found: $FluentBitLogPath" -ForegroundColor Red
    Write-Host "Service may not be running or logging may not be configured correctly" -ForegroundColor Yellow
}
"@
    
    $tailScriptPath = "$logDir\monitor-fluent-bit.ps1"
    try {
        $tailScript | Out-File -FilePath $tailScriptPath -Encoding UTF8 -Force
        Write-Status "Created log monitoring script: $tailScriptPath" "Success"
    }
    catch {
        Write-Status "Failed to create log monitoring script: $($_.Exception.Message)" "Warning"
    }
    
    # Create service status check script
    $statusScript = @"
# FluentBit Service Status Script
# Auto-generated by Deploy-FluentBit.ps1

Write-Host "FluentBit Service Status Report" -ForegroundColor Cyan
Write-Host "=" * 40

# Check service status
`$service = Get-Service -Name "fluent-bit" -ErrorAction SilentlyContinue
if (`$service) {
    Write-Host "Service Status: `$(`$service.Status)" -ForegroundColor Green
    Write-Host "Start Type: `$(`$service.StartType)" -ForegroundColor Gray
} else {
    Write-Host "FluentBit service not found!" -ForegroundColor Red
}

# Check log file
Write-Host "`nLog File Status:" -ForegroundColor Cyan
if (Test-Path "$FluentBitLogPath") {
    `$logFile = Get-Item "$FluentBitLogPath"
    Write-Host "Log File: `$(`$logFile.FullName)" -ForegroundColor Green
    Write-Host "Size: `$([math]::Round(`$logFile.Length / 1KB, 2)) KB" -ForegroundColor Gray
    Write-Host "Last Modified: `$(`$logFile.LastWriteTime)" -ForegroundColor Gray
    
    Write-Host "`nLast 5 log entries:" -ForegroundColor Cyan
    Get-Content "$FluentBitLogPath" -Tail 5 | ForEach-Object { Write-Host "  `$_" -ForegroundColor Gray }
} else {
    Write-Host "Log file not found: $FluentBitLogPath" -ForegroundColor Red
}

# Check gzip processing status
Write-Host "`nGzip Processing Status:" -ForegroundColor Cyan
`$gzipStateFile = "$StoragePath\gzip-processing-state.json"
if (Test-Path `$gzipStateFile) {
    try {
        `$gzipState = Get-Content `$gzipStateFile -Raw | ConvertFrom-Json
        `$stats = `$gzipState.processing_stats
        
        Write-Host "Gzip Processing: ENABLED" -ForegroundColor Green
        Write-Host "Total Files: `$(`$stats.total_files) | Completed: `$(`$stats.completed) | Pending: `$(`$stats.pending) | Failed: `$(`$stats.failed)" -ForegroundColor Gray
        Write-Host "Batch Size: `$(`$gzipState.batch_size) | Interval: `$(`$gzipState.processing_interval)s" -ForegroundColor Gray
        Write-Host "Temp Directory: `$(`$gzipState.gzip_temp_dir)" -ForegroundColor Gray
        
        # Show recent gzip processor activity
        `$gzipLogFile = "$StoragePath\gzip-processor.log"
        if (Test-Path `$gzipLogFile) {
            Write-Host "`nRecent Gzip Processing:" -ForegroundColor Cyan
            Get-Content `$gzipLogFile -Tail 3 | ForEach-Object { Write-Host "  `$_" -ForegroundColor Gray }
        }
    } catch {
        Write-Host "Gzip Processing: ERROR reading state file" -ForegroundColor Red
    }
} else {
    Write-Host "Gzip Processing: DISABLED" -ForegroundColor Gray
}

# Check HTTP metrics endpoint
Write-Host "`nHTTP Metrics Endpoint:" -ForegroundColor Cyan
try {
    `$response = Invoke-WebRequest -Uri "http://localhost:2020/api/v1/metrics" -TimeoutSec 5 -UseBasicParsing
    Write-Host "HTTP Endpoint: Available (Status: `$(`$response.StatusCode))" -ForegroundColor Green
} catch {
    Write-Host "HTTP Endpoint: Not available" -ForegroundColor Yellow
    Write-Host "Error: `$(`$_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nQuick Commands:" -ForegroundColor Cyan
Write-Host "  Start Service: Start-Service fluent-bit" -ForegroundColor Gray
Write-Host "  Stop Service: Stop-Service fluent-bit" -ForegroundColor Gray
Write-Host "  Restart Service: Restart-Service fluent-bit" -ForegroundColor Gray
Write-Host "  Monitor Logs: & '$tailScriptPath'" -ForegroundColor Gray
Write-Host "  View Metrics: http://localhost:2020" -ForegroundColor Gray

# Gzip-specific commands
if (Test-Path "$StoragePath\gzip-processing-state.json") {
    Write-Host "`nGzip Processing Commands:" -ForegroundColor Cyan
    Write-Host "  Check Gzip Status: Get-Content '$StoragePath\gzip-processing-state.json' | ConvertFrom-Json | Select-Object processing_stats" -ForegroundColor Gray
    Write-Host "  Monitor Gzip Logs: Get-Content '$StoragePath\gzip-processor.log' -Tail 10 -Wait" -ForegroundColor Gray
    Write-Host "  List Temp Files: Get-ChildItem '$StoragePath\gzip-temp' -Recurse" -ForegroundColor Gray
    Write-Host "  Manual Gzip Run: & '$InstallPath\scripts\Process-GzipFiles.ps1' -StoragePath '$StoragePath'" -ForegroundColor Gray
}
"@
    
    $statusScriptPath = "$logDir\check-fluent-bit-status.ps1"
    try {
        $statusScript | Out-File -FilePath $statusScriptPath -Encoding UTF8 -Force
        Write-Status "Created status check script: $statusScriptPath" "Success"
    }
    catch {
        Write-Status "Failed to create status check script: $($_.Exception.Message)" "Warning"
    }
    
    return $true
}

# Function to show deployment summary (simplified - no gzip sections)
function Show-DeploymentSummary {
    Write-Host "`n" -NoNewline
    Write-Host "═══════════════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host "                    DEPLOYMENT SUMMARY                        " -ForegroundColor Cyan
    Write-Host "═══════════════════════════════════════════════════════════════" -ForegroundColor Cyan
    
    Write-Host "`nInstallation Paths:" -ForegroundColor Yellow
    Write-Host "  • FluentBit: $InstallPath"
    Write-Host "  • Configuration: $ConfigPath"
    Write-Host "  • Storage: $StoragePath"
    Write-Host "  • SQLite Tools: $SqliteToolsPath"
    
    # Show logging configuration
    Write-Host "`nLogging Configuration:" -ForegroundColor Yellow
    Write-Host "  • Log File: $FluentBitLogPath"
    Write-Host "  • Log Level: $LogLevel"
    
    # Check if log file exists and show current status
    if (Test-Path $FluentBitLogPath) {
        $logFile = Get-Item $FluentBitLogPath
        $logSizeKB = [math]::Round($logFile.Length / 1KB, 2)
        Write-Host "  • Current Log Size: $logSizeKB KB"
        Write-Host "  • Last Updated: $($logFile.LastWriteTime)"
    } else {
        Write-Host "  • Log File Status: Not yet created (service may need to start)" -ForegroundColor Gray
    }
    
    Write-Host "`nBackend Configuration:" -ForegroundColor Yellow
    Write-Host "  • Host: $CtrlBHost"
    Write-Host "  • Port: $CtrlBPort"
    Write-Host "  • Stream: $CtrlBStreamName"
    Write-Host "  • Auth: $CtrlBAuthHeader"
    
    Write-Host "`nMonitored Log Paths ($($LogPaths.Count) paths, depth 0-$MaxDirectoryDepth):" -ForegroundColor Yellow
    foreach ($path in $LogPaths) {
        Write-Host "  • $path\*.log (recursive)"
    }
    
    if ($ProcessGzipFiles) {
        Write-Host "`nGzip Archive Processing:" -ForegroundColor Yellow
        
        # Try to read gzip state file for statistics
        $gzipStateFile = "$StoragePath\gzip-processing-state.json"
        if (Test-Path $gzipStateFile) {
            try {
                $gzipState = Get-Content $gzipStateFile -Raw | ConvertFrom-Json
                $stats = $gzipState.processing_stats
                
                Write-Host "  • Total gzip files discovered: $($stats.total_files)"
                Write-Host "  • Processing batch size: $($gzipState.batch_size) files"
                Write-Host "  • Processing interval: $($gzipState.processing_interval) seconds"
                Write-Host "  • Temp extraction directory: $($gzipState.gzip_temp_dir)"
                Write-Host "  • Current status: $($stats.completed) completed, $($stats.pending) pending, $($stats.failed) failed"
                
                # Show folder organization
                $folderNames = $gzipState.discovered_files | 
                              Select-Object -ExpandProperty folder_name | 
                              Sort-Object -Unique
                Write-Host "  • Organized extraction folders: $($folderNames -join ', ')"
                
                # Show tag pattern
                Write-Host "  • Gzip tag pattern: app.java.gzip.{folderName}.archived"
            }
            catch {
                Write-Host "  • Status: Gzip state file exists but couldn't read statistics" -ForegroundColor Gray
            }
        } else {
            Write-Host "  • Status: Gzip processing initialized but no state file found yet" -ForegroundColor Gray
        }
    } else {
        Write-Host "`nGzip Archive Processing: DISABLED" -ForegroundColor Gray
        Write-Host "  • Use -ProcessGzipFiles flag to enable historical .gz file processing"
    }

    # Show cleanup actions if performed
    if ($CleanInstall -or $DeepClean) {
        Write-Host "`nCleanup Actions Performed:" -ForegroundColor Yellow
        if ($CleanInstall) {
            Write-Host "  • Complete FluentBit uninstall and service removal"
            Write-Host "  • Fresh installation and configuration"
        }
        if ($DeepClean) {
            Write-Host "  • Deep cleanup of FluentBit-created databases and temp files"
        }
    }
    
    Write-Host "`nGenerated INPUT Sections:" -ForegroundColor Yellow
    $totalLogInputs = $LogPaths.Count * ($MaxDirectoryDepth + 1) + 1  # +1 for SQL Server
    Write-Host "  • Log file inputs: $totalLogInputs"
    Write-Host "  • Tag pattern: app.java.{folderName}.level{N}"
    Write-Host "  • SQL Server: app.sql_server.errorlog"
    
    # Check service status
    $serviceStatus = Get-Service -Name "fluent-bit" -ErrorAction SilentlyContinue
    if ($serviceStatus) {
        Write-Host "`nWindows Service Status:" -ForegroundColor Yellow
        Write-Host "  • Service Name: fluent-bit"
        Write-Host "  • Status: $($serviceStatus.Status)"
        Write-Host "  • Start Type: $($serviceStatus.StartType)"
    }
    
    Write-Host "`nService Management:" -ForegroundColor Yellow
    Write-Host "  • Start Service: Start-Service fluent-bit"
    Write-Host "  • Stop Service: Stop-Service fluent-bit"
    Write-Host "  • Restart Service: Restart-Service fluent-bit"
    Write-Host "  • Check Status: Get-Service fluent-bit"
    Write-Host "  • Uninstall Service: sc.exe delete fluent-bit"

    # Show logging and monitoring commands
    Write-Host "`nLogging & Monitoring:" -ForegroundColor Yellow
    Write-Host "  • View Logs: Get-Content '$FluentBitLogPath' -Tail 20 -Wait"
    Write-Host "  • Monitor Live: & '$(Split-Path $FluentBitLogPath -Parent)\monitor-fluent-bit.ps1'"
    Write-Host "  • Check Status: & '$(Split-Path $FluentBitLogPath -Parent)\check-fluent-bit-status.ps1'"
    Write-Host "  • HTTP Metrics: http://localhost:2020/api/v1/metrics"

    Write-Host "`nNext Steps:" -ForegroundColor Yellow
    Write-Host "  1. Service should be running automatically"
    Write-Host "  2. Monitor FluentBit logs at: $FluentBitLogPath"
    Write-Host "  3. Check HTTP status at: http://localhost:2020"
    Write-Host "  4. Verify log ingestion is working"
  
    Write-Host "`nTroubleshooting Commands:" -ForegroundColor Yellow
    Write-Host "  • Test Config: & '$InstallPath\bin\fluent-bit.exe' -c '$ConfigPath\fluent-bit-onbe.conf' -D"
    Write-Host "  • Manual Run: & '$InstallPath\bin\fluent-bit.exe' -c '$ConfigPath\fluent-bit-onbe.conf'"
    Write-Host "  • View Event Logs: Get-EventLog -LogName Application -Source fluent-bit -Newest 10"
    Write-Host "  • Clean Reinstall: Add -CleanInstall flag to this script"
    Write-Host "  • Deep Clean Reinstall: Add -DeepClean flag to this script"
    
    Write-Host "`n═══════════════════════════════════════════════════════════════" -ForegroundColor Cyan
}
